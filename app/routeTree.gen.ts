/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DeferredImport } from './routes/deferred'
import { Route as IndexImport } from './routes/index'
import { Route as PublicProductsIndexImport } from './routes/public/products/index'
import { Route as AdminUsersIndexImport } from './routes/admin/users/index'
import { Route as AdminProductsIndexImport } from './routes/admin/products/index'
import { Route as AdminCategoriesIndexImport } from './routes/admin/categories/index'
import { Route as AdminProductsCreateImport } from './routes/admin/products/create'
import { Route as PublicProductsViewIdImport } from './routes/public/products/view.$id'
import { Route as AdminProductsViewIdImport } from './routes/admin/products/view.$id'
import { Route as AdminProductsEditIdImport } from './routes/admin/products/edit.$id'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PublicProductsIndexRoute = PublicProductsIndexImport.update({
  id: '/public/products/',
  path: '/public/products/',
  getParentRoute: () => rootRoute,
} as any)

const AdminUsersIndexRoute = AdminUsersIndexImport.update({
  id: '/admin/users/',
  path: '/admin/users/',
  getParentRoute: () => rootRoute,
} as any)

const AdminProductsIndexRoute = AdminProductsIndexImport.update({
  id: '/admin/products/',
  path: '/admin/products/',
  getParentRoute: () => rootRoute,
} as any)

const AdminCategoriesIndexRoute = AdminCategoriesIndexImport.update({
  id: '/admin/categories/',
  path: '/admin/categories/',
  getParentRoute: () => rootRoute,
} as any)

const AdminProductsCreateRoute = AdminProductsCreateImport.update({
  id: '/admin/products/create',
  path: '/admin/products/create',
  getParentRoute: () => rootRoute,
} as any)

const PublicProductsViewIdRoute = PublicProductsViewIdImport.update({
  id: '/public/products/view/$id',
  path: '/public/products/view/$id',
  getParentRoute: () => rootRoute,
} as any)

const AdminProductsViewIdRoute = AdminProductsViewIdImport.update({
  id: '/admin/products/view/$id',
  path: '/admin/products/view/$id',
  getParentRoute: () => rootRoute,
} as any)

const AdminProductsEditIdRoute = AdminProductsEditIdImport.update({
  id: '/admin/products/edit/$id',
  path: '/admin/products/edit/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/admin/products/create': {
      id: '/admin/products/create'
      path: '/admin/products/create'
      fullPath: '/admin/products/create'
      preLoaderRoute: typeof AdminProductsCreateImport
      parentRoute: typeof rootRoute
    }
    '/admin/categories/': {
      id: '/admin/categories/'
      path: '/admin/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/products/': {
      id: '/admin/products/'
      path: '/admin/products'
      fullPath: '/admin/products'
      preLoaderRoute: typeof AdminProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/users/': {
      id: '/admin/users/'
      path: '/admin/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AdminUsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/public/products/': {
      id: '/public/products/'
      path: '/public/products'
      fullPath: '/public/products'
      preLoaderRoute: typeof PublicProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/products/edit/$id': {
      id: '/admin/products/edit/$id'
      path: '/admin/products/edit/$id'
      fullPath: '/admin/products/edit/$id'
      preLoaderRoute: typeof AdminProductsEditIdImport
      parentRoute: typeof rootRoute
    }
    '/admin/products/view/$id': {
      id: '/admin/products/view/$id'
      path: '/admin/products/view/$id'
      fullPath: '/admin/products/view/$id'
      preLoaderRoute: typeof AdminProductsViewIdImport
      parentRoute: typeof rootRoute
    }
    '/public/products/view/$id': {
      id: '/public/products/view/$id'
      path: '/public/products/view/$id'
      fullPath: '/public/products/view/$id'
      preLoaderRoute: typeof PublicProductsViewIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/login': typeof LoginRoute
  '/admin/products/create': typeof AdminProductsCreateRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/public/products': typeof PublicProductsIndexRoute
  '/admin/products/edit/$id': typeof AdminProductsEditIdRoute
  '/admin/products/view/$id': typeof AdminProductsViewIdRoute
  '/public/products/view/$id': typeof PublicProductsViewIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/login': typeof LoginRoute
  '/admin/products/create': typeof AdminProductsCreateRoute
  '/admin/categories': typeof AdminCategoriesIndexRoute
  '/admin/products': typeof AdminProductsIndexRoute
  '/admin/users': typeof AdminUsersIndexRoute
  '/public/products': typeof PublicProductsIndexRoute
  '/admin/products/edit/$id': typeof AdminProductsEditIdRoute
  '/admin/products/view/$id': typeof AdminProductsViewIdRoute
  '/public/products/view/$id': typeof PublicProductsViewIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/login': typeof LoginRoute
  '/admin/products/create': typeof AdminProductsCreateRoute
  '/admin/categories/': typeof AdminCategoriesIndexRoute
  '/admin/products/': typeof AdminProductsIndexRoute
  '/admin/users/': typeof AdminUsersIndexRoute
  '/public/products/': typeof PublicProductsIndexRoute
  '/admin/products/edit/$id': typeof AdminProductsEditIdRoute
  '/admin/products/view/$id': typeof AdminProductsViewIdRoute
  '/public/products/view/$id': typeof PublicProductsViewIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deferred'
    | '/login'
    | '/admin/products/create'
    | '/admin/categories'
    | '/admin/products'
    | '/admin/users'
    | '/public/products'
    | '/admin/products/edit/$id'
    | '/admin/products/view/$id'
    | '/public/products/view/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/login'
    | '/admin/products/create'
    | '/admin/categories'
    | '/admin/products'
    | '/admin/users'
    | '/public/products'
    | '/admin/products/edit/$id'
    | '/admin/products/view/$id'
    | '/public/products/view/$id'
  id:
    | '__root__'
    | '/'
    | '/deferred'
    | '/login'
    | '/admin/products/create'
    | '/admin/categories/'
    | '/admin/products/'
    | '/admin/users/'
    | '/public/products/'
    | '/admin/products/edit/$id'
    | '/admin/products/view/$id'
    | '/public/products/view/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DeferredRoute: typeof DeferredRoute
  LoginRoute: typeof LoginRoute
  AdminProductsCreateRoute: typeof AdminProductsCreateRoute
  AdminCategoriesIndexRoute: typeof AdminCategoriesIndexRoute
  AdminProductsIndexRoute: typeof AdminProductsIndexRoute
  AdminUsersIndexRoute: typeof AdminUsersIndexRoute
  PublicProductsIndexRoute: typeof PublicProductsIndexRoute
  AdminProductsEditIdRoute: typeof AdminProductsEditIdRoute
  AdminProductsViewIdRoute: typeof AdminProductsViewIdRoute
  PublicProductsViewIdRoute: typeof PublicProductsViewIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DeferredRoute: DeferredRoute,
  LoginRoute: LoginRoute,
  AdminProductsCreateRoute: AdminProductsCreateRoute,
  AdminCategoriesIndexRoute: AdminCategoriesIndexRoute,
  AdminProductsIndexRoute: AdminProductsIndexRoute,
  AdminUsersIndexRoute: AdminUsersIndexRoute,
  PublicProductsIndexRoute: PublicProductsIndexRoute,
  AdminProductsEditIdRoute: AdminProductsEditIdRoute,
  AdminProductsViewIdRoute: AdminProductsViewIdRoute,
  PublicProductsViewIdRoute: PublicProductsViewIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/deferred",
        "/login",
        "/admin/products/create",
        "/admin/categories/",
        "/admin/products/",
        "/admin/users/",
        "/public/products/",
        "/admin/products/edit/$id",
        "/admin/products/view/$id",
        "/public/products/view/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/admin/products/create": {
      "filePath": "admin/products/create.tsx"
    },
    "/admin/categories/": {
      "filePath": "admin/categories/index.tsx"
    },
    "/admin/products/": {
      "filePath": "admin/products/index.tsx"
    },
    "/admin/users/": {
      "filePath": "admin/users/index.tsx"
    },
    "/public/products/": {
      "filePath": "public/products/index.tsx"
    },
    "/admin/products/edit/$id": {
      "filePath": "admin/products/edit.$id.tsx"
    },
    "/admin/products/view/$id": {
      "filePath": "admin/products/view.$id.tsx"
    },
    "/public/products/view/$id": {
      "filePath": "public/products/view.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
