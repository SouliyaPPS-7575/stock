/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as DeferredImport } from './routes/deferred'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as CategoriesIndexImport } from './routes/categories/index'
import { Route as ProductsEditImport } from './routes/products/edit'
import { Route as ProductsCreateImport } from './routes/products/create'
import { Route as ProductsViewIdImport } from './routes/products/view.$id'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesIndexRoute = CategoriesIndexImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsEditRoute = ProductsEditImport.update({
  id: '/products/edit',
  path: '/products/edit',
  getParentRoute: () => rootRoute,
} as any)

const ProductsCreateRoute = ProductsCreateImport.update({
  id: '/products/create',
  path: '/products/create',
  getParentRoute: () => rootRoute,
} as any)

const ProductsViewIdRoute = ProductsViewIdImport.update({
  id: '/products/view/$id',
  path: '/products/view/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/products/create': {
      id: '/products/create'
      path: '/products/create'
      fullPath: '/products/create'
      preLoaderRoute: typeof ProductsCreateImport
      parentRoute: typeof rootRoute
    }
    '/products/edit': {
      id: '/products/edit'
      path: '/products/edit'
      fullPath: '/products/edit'
      preLoaderRoute: typeof ProductsEditImport
      parentRoute: typeof rootRoute
    }
    '/categories/': {
      id: '/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/view/$id': {
      id: '/products/view/$id'
      path: '/products/view/$id'
      fullPath: '/products/view/$id'
      preLoaderRoute: typeof ProductsViewIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/login': typeof LoginRoute
  '/products/create': typeof ProductsCreateRoute
  '/products/edit': typeof ProductsEditRoute
  '/categories': typeof CategoriesIndexRoute
  '/products': typeof ProductsIndexRoute
  '/users': typeof UsersIndexRoute
  '/products/view/$id': typeof ProductsViewIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/login': typeof LoginRoute
  '/products/create': typeof ProductsCreateRoute
  '/products/edit': typeof ProductsEditRoute
  '/categories': typeof CategoriesIndexRoute
  '/products': typeof ProductsIndexRoute
  '/users': typeof UsersIndexRoute
  '/products/view/$id': typeof ProductsViewIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/login': typeof LoginRoute
  '/products/create': typeof ProductsCreateRoute
  '/products/edit': typeof ProductsEditRoute
  '/categories/': typeof CategoriesIndexRoute
  '/products/': typeof ProductsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/products/view/$id': typeof ProductsViewIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/deferred'
    | '/login'
    | '/products/create'
    | '/products/edit'
    | '/categories'
    | '/products'
    | '/users'
    | '/products/view/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/login'
    | '/products/create'
    | '/products/edit'
    | '/categories'
    | '/products'
    | '/users'
    | '/products/view/$id'
  id:
    | '__root__'
    | '/'
    | '/deferred'
    | '/login'
    | '/products/create'
    | '/products/edit'
    | '/categories/'
    | '/products/'
    | '/users/'
    | '/products/view/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DeferredRoute: typeof DeferredRoute
  LoginRoute: typeof LoginRoute
  ProductsCreateRoute: typeof ProductsCreateRoute
  ProductsEditRoute: typeof ProductsEditRoute
  CategoriesIndexRoute: typeof CategoriesIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  ProductsViewIdRoute: typeof ProductsViewIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DeferredRoute: DeferredRoute,
  LoginRoute: LoginRoute,
  ProductsCreateRoute: ProductsCreateRoute,
  ProductsEditRoute: ProductsEditRoute,
  CategoriesIndexRoute: CategoriesIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  ProductsViewIdRoute: ProductsViewIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/deferred",
        "/login",
        "/products/create",
        "/products/edit",
        "/categories/",
        "/products/",
        "/users/",
        "/products/view/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/products/create": {
      "filePath": "products/create.tsx"
    },
    "/products/edit": {
      "filePath": "products/edit.tsx"
    },
    "/categories/": {
      "filePath": "categories/index.tsx"
    },
    "/products/": {
      "filePath": "products/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    },
    "/products/view/$id": {
      "filePath": "products/view.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
