importScripts(
  'https://storage.googleapis.com/workbox-cdn/releases/6.4.1/workbox-sw.js'
);

// Check if Workbox is available
if (workbox) {
  console.log('Workbox is loaded.');

  // Precache files generated by the build process
  workbox.precaching.precacheAndRoute(self.__WB_MANIFEST || []);

  // Clean up outdated caches
  workbox.precaching.cleanupOutdatedCaches();

  // Cache Static Assets (JS, CSS, Fonts, Images)
  workbox.routing.registerRoute(
    /\.(?:js|css|woff2?|png|jpg|jpeg|gif|svg|ico|webp|avif)$/i,
    new workbox.strategies.StaleWhileRevalidate({
      cacheName: 'static-assets',
      plugins: [
        new workbox.cacheableResponse.CacheableResponsePlugin({
          statuses: [0, 200],
        }),
        new workbox.expiration.ExpirationPlugin({
          maxEntries: 200,
          maxAgeSeconds: 60 * 60 * 24 * 30, // 30 days
        }),
      ],
    })
  );

  // Cache HTML Pages (Every Route for SPA)
  workbox.routing.registerRoute(
    ({ request }) => request.mode === 'navigate',
    new workbox.strategies.NetworkFirst({
      cacheName: 'html-cache',
      plugins: [
        new workbox.cacheableResponse.CacheableResponsePlugin({
          statuses: [0, 200],
        }),
        new workbox.expiration.ExpirationPlugin({
          maxEntries: 50,
          maxAgeSeconds: 60 * 60 * 24 * 7, // 7 days
        }),
      ],
    })
  );

  // Cache API Requests
  workbox.routing.registerRoute(
    /^https:\/\/example-api\.com\/.*/,
    new workbox.strategies.NetworkFirst({
      cacheName: 'api-cache',
      plugins: [
        new workbox.cacheableResponse.CacheableResponsePlugin({
          statuses: [0, 200],
        }),
        new workbox.expiration.ExpirationPlugin({
          maxEntries: 50,
          maxAgeSeconds: 60 * 60 * 24 * 7, // 7 days
        }),
      ],
    })
  );

  // Fallback for Offline Navigation
  self.addEventListener('fetch', (event) => {
    if (event.request.mode === 'navigate') {
      event.respondWith(
        caches.match('/index.html').then((response) => {
          return response || fetch(event.request);
        })
      );
    }
  });

  // Listen for 'beforeinstallprompt' event
  self.addEventListener('beforeinstallprompt', (event) => {
    // Prevent the default prompt
    event.preventDefault();
    // Store the event so it can be triggered later
    self.deferredPrompt = event;
  });

  // Handle user interaction with the prompt
  self.addEventListener('appinstalled', (event) => {
    // Clear the deferred prompt
    self.deferredPrompt = null;
  });

  // Activate Service Worker Immediately
  self.addEventListener('activate', (event) => {
    event.waitUntil(self.clients.claim());
  });
} else {
  console.error(
    'Workbox could not be loaded. Make sure to import the Workbox CDN.'
  );
}

self.addEventListener('fetch', (event) => {
  if (event.request.url.endsWith('/robots.txt')) {
    return; // Skip caching or custom handling for robots.txt
  }
  // Default fetch handler
  event.respondWith(
    caches.match(event.request).then((response) => {
      return response || fetch(event.request);
    })
  );
});
